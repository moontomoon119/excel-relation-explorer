version: '3.8'

services:
  # OSM 파일 다운로드 서비스
  ors-download:
    image: alpine:latest
    container_name: excel-relations-ors-download
    volumes:
      - ./openroute/ors-docker:/ors
    command: >
      sh -c "
        echo '=== OpenRouteService OSM Download Service ===';
        
        echo 'Creating directories...';
        mkdir -p /ors/files /ors/graphs /ors/elevation_cache /ors/logs /ors/config;
        
        OSM_FILE='/ors/files/south-korea-latest.osm.pbf';
        if [ ! -f $$OSM_FILE ] || [ ! -s $$OSM_FILE ]; then
          echo 'OSM file not found or empty. Starting download...';
          
          apk add --no-cache wget curl;
          
          echo 'Downloading from: http://download.geofabrik.de/asia/south-korea-latest.osm.pbf';
          if wget --timeout=300 --tries=3 --progress=bar:force:noscroll -O $$OSM_FILE.tmp http://download.geofabrik.de/asia/south-korea-latest.osm.pbf; then
            mv $$OSM_FILE.tmp $$OSM_FILE;
            echo 'Download completed successfully';
            echo \"File size: $$(ls -lh $$OSM_FILE | awk '{print $$5}')\";
          else
            echo 'ERROR: Download failed!';
            echo 'Please manually download south-korea-latest.osm.pbf from:';
            echo 'https://download.geofabrik.de/asia/south-korea.html';
            echo 'and place it in ./openroute/ors-docker/files/';
            exit 1;
          fi
        else
          echo 'OSM file already exists';
          echo \"File: $$OSM_FILE\";
          echo \"Size: $$(ls -lh $$OSM_FILE | awk '{print $$5}')\";
        fi;
        
        echo 'Setting permissions...';
        chmod -R 755 /ors;
        chown -R 1000:1000 /ors 2>/dev/null || echo 'Warning: Could not change ownership (not critical)';
        
        echo 'Setup completed successfully!';
      "
    restart: "no"

  # OpenRouteService 메인 애플리케이션
  ors-app:
    image: openrouteservice/openrouteservice:v8.2.0
    container_name: excel-relations-ors-app
    ports:
      - "8082:8082"  # API 포트
      - "9002:9001"  # 액추에이터 포트 (모니터링)
    volumes:
      - ./openroute/ors-docker:/home/ors
    environment:
      REBUILD_GRAPHS: False
      CONTAINER_LOG_LEVEL: INFO
      
      
      # 메모리 설정
      XMS: 8g
      XMX: 16g
      CATALINA_OPTS: "-Dserver.port=8082 -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      
      ORS_CONFIG_LOCATION: /home/ors/config/ors-config.yml
    
    depends_on:
      ors-download:
        condition: service_completed_successfully
    
    restart: unless-stopped
    
    # 헬스체크
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/ors/v2/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s

  # 프론트엔드 서비스
  frontend:
    build: ./excel-relations-front
    container_name: excel-relations-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./excel-relations-front:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:5000
    restart: unless-stopped

  # 백엔드 서비스
  backend:
    build: ./excel-relations-api
    container_name: excel-relations-backend
    ports:
      - "5000:5000"
    volumes:
      - ./excel-relations-api:/app
      - /app/node_modules
      - ./excel-relations-api/uploads:/app/uploads
    depends_on:
      - postgres
      - ors-app  # OpenRouteService에 의존
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/excel_relations
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=excel_relations
      # ORS 연결을 위한 환경변수
      - OPENROUTE_API_URL=http://excel-relations-ors-app:8082/ors/v2/isochrones/foot-walking
    restart: unless-stopped

  # PostgreSQL 데이터베이스
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: excel-relations-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/tmp/sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=excel_relations
    entrypoint: >
      sh -c "
      cat /tmp/sql/init_part_* > /docker-entrypoint-initdb.d/init.sql 2>/dev/null || true;
      exec docker-entrypoint.sh postgres"
    restart: unless-stopped

volumes:
  postgres_data: