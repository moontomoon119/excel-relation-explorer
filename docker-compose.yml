services:
  # 프론트엔드 서비스
  frontend:
    build: ./excel-relations-front
    container_name: excel-relations-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./excel-relations-front:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:5000
    restart: unless-stopped

  # 백엔드 서비스
  backend:
    build: ./excel-relations-api
    container_name: excel-relations-backend
    ports:
      - "5000:5000"
    volumes:
      - ./excel-relations-api:/app
      - /app/node_modules
      - ./excel-relations-api/uploads:/app/uploads
    depends_on:
      - postgres
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/excel_relations
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=excel_relations
    restart: unless-stopped

  # PostgreSQL 데이터베이스
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: excel-relations-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/tmp/sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=excel_relations
    entrypoint: >
      sh -c "
      cat /tmp/sql/init_part_* > /docker-entrypoint-initdb.d/init.sql 2>/dev/null || true;
      exec docker-entrypoint.sh postgres"
    restart: unless-stopped

  # OpenRouteService - isochrone 특별 설정 추가
  openroute:
    image: openrouteservice/openrouteservice:v8.2.0
    container_name: excel-relations-openroute
    ports:
      - "8081:8082"
      - "9002:9001"
    volumes:
      - ./openroute/ors-docker:/home/ors
    environment:
      # 메모리 증가 - isochrone 계산을 위해
      - REBUILD_GRAPHS=True
      - CONTAINER_LOG_LEVEL=INFO
      - XMS=6g
      - XMX=12g
      
      # 기본 엔진 설정
      - ors.engine.source_file=/home/ors/files/south-korea-latest.osm.pbf
      - ors.engine.graphs_root_path=/home/ors/graphs
      - ors.engine.elevation.cache_path=/home/ors/elevation_cache
      - ors.engine.init_threads=2
      
      # 프로필 설정
      - ors.engine.profiles.active=driving-car
      - ors.engine.profiles.default_params.encoder_flags_size=4
      - ors.engine.profiles.default_params.graphs_root_path=/home/ors/graphs
      - ors.engine.profiles.default_params.elevation=true
      - ors.engine.profiles.default_params.preparation.min_network_size=200
      
      # Driving car 프로필
      - ors.engine.profiles.driving-car.enabled=true
      - ors.engine.profiles.driving-car.profiles=driving
      - ors.engine.profiles.driving-car.parameters.encoder_flags_size=8
      - ors.engine.profiles.driving-car.parameters.encoder_options.turn_costs=true
      - ors.engine.profiles.driving-car.preparation.min_network_size=200
      
      # FastIsochrone 활성화 (더 빠른 isochrone 계산)
      - ors.engine.profiles.driving-car.preparation.methods.fastisochrones.enabled=true
      - ors.engine.profiles.driving-car.preparation.methods.fastisochrones.threads=4
      
      # 서비스 설정 - 제한 완화
      - ors.services.routing.enabled=true
      - ors.services.isochrones.enabled=true
      - ors.services.isochrones.maximum_locations=5
      - ors.services.isochrones.maximum_intervals=5
      - ors.services.isochrones.maximum_range_distance_default=100000
      - ors.services.isochrones.maximum_range_time_default=3600
      - ors.services.matrix.enabled=true
      
      # 로깅
      - logging.level.root=INFO
      - logging.level.org.heigit.ors=INFO
      - logging.level.org.heigit.ors.isochrones=DEBUG
    depends_on:
      ors-download:
        condition: service_completed_successfully
    restart: unless-stopped

  # OSM 파일 다운로드
  ors-download:
    image: alpine:latest
    container_name: ors-download
    volumes:
      - ./openroute:/openroute
    command: |
      sh -c "
        echo 'Creating directories...'
        mkdir -p /openroute/ors-docker/files /openroute/ors-docker/graphs /openroute/ors-docker/elevation_cache /openroute/ors-docker/logs /openroute/ors-docker/config
        
        # OSM 파일 다운로드
        if [ ! -f /openroute/ors-docker/files/south-korea-latest.osm.pbf ] || [ ! -s /openroute/ors-docker/files/south-korea-latest.osm.pbf ]; then
          echo 'Downloading OSM file for South Korea...'
          apk add --no-cache wget
          wget --progress=bar:force:noscroll -O /openroute/ors-docker/files/south-korea-latest.osm.pbf.tmp \
            http://download.geofabrik.de/asia/south-korea-latest.osm.pbf
          mv /openroute/ors-docker/files/south-korea-latest.osm.pbf.tmp /openroute/ors-docker/files/south-korea-latest.osm.pbf
          echo 'Download completed'
          ls -lh /openroute/ors-docker/files/south-korea-latest.osm.pbf
        else
          echo 'OSM file already exists'
          ls -lh /openroute/ors-docker/files/south-korea-latest.osm.pbf
        fi
        
        echo 'Setting permissions...'
        chmod -R 755 /openroute/ors-docker
        echo 'Setup completed'
      "
    restart: "no"

volumes:
  postgres_data: